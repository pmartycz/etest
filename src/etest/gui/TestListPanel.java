/*
 * Copyright (C) 2017 Piotr Martycz
 */
package etest.gui;

import etest.Application;
import etest.client.Client;
import etest.client.ProtocolException;
import etest.entities.Test;
import etest.entities.TestHeader;
import etest.entities.TestStatus;
import java.io.IOException;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 * A panel containing a list of tests available to the user.
 * 
 * @author pmart
 */
public class TestListPanel extends javax.swing.JPanel {
    private static final DateTimeFormatter dateTimeFormatter = 
            DateTimeFormatter.RFC_1123_DATE_TIME.withZone(ZoneId.systemDefault());
    
    private final DefaultTableModel tableModel;
    //private TestHeader[] tests = JsonHelper.fromJson(Examples.TEST_HEADERS_JSON, TestHeader[].class);
    private TestHeader[] tests;
    private final Client client;

    /**
     * Creates new form TestListPanel.
     * 
     * @param client client for making requests to test server
     * @param tests list of test headers
     */
    public TestListPanel(Client client, TestHeader[] tests) {
        this.client = client;
        this.tests = tests;
        
        initComponents();
        
        tableModel = (DefaultTableModel) testsTable.getModel();

        testsTable.getSelectionModel().addListSelectionListener(
            new ListSelectionListener() {
                public void valueChanged(ListSelectionEvent event) {
                    TestHeader test = getSelectedTestHeader();
                    if (test == null)
                        return;
                    if (test.isStatus(TestStatus.CLOSED))
                        openButton.setEnabled(false);
                    else
                        openButton.setEnabled(true);
                    displayDetails(test);
                }
            }
        );
        
        populateTable();
    }
    
    private void populateTable() {
        tableModel.setRowCount(0);

        for (TestHeader t : tests) {
            tableModel.addRow(new Object[] {
                t.getStatus(), t.getName(),
                t.isMultiChoice()
            });
        }

        testsTable.changeSelection(0, 0, false, false);
    }
    
    private TestHeader getSelectedTestHeader() {
        int viewRowIndex = testsTable.getSelectedRow();
        if (viewRowIndex == -1)
            return null;
        else
            return tests[testsTable.convertRowIndexToModel(viewRowIndex)];
    }
    
    private void displayDetails(TestHeader test) {   
        ownerValueLabel.setText(test.getOwner());
        startTimeValueLabel.setText(dateTimeFormatter.format(test.getStartTime()));
        endTimeValueLabel.setText(dateTimeFormatter.format(test.getEndTime()));
        timeLimitValueLabel.setText(
                Long.toString(test.getTimeLimit().toMinutes()) + " minutes");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testsTableScrollPane = new javax.swing.JScrollPane();
        testsTable = new javax.swing.JTable();
        openButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        tableLabel = new javax.swing.JLabel();
        detailsPanel = new javax.swing.JPanel();
        startTimeLabel = new javax.swing.JLabel();
        endTimeLabel = new javax.swing.JLabel();
        ownerLabel = new javax.swing.JLabel();
        ownerValueLabel = new javax.swing.JLabel();
        startTimeValueLabel = new javax.swing.JLabel();
        endTimeValueLabel = new javax.swing.JLabel();
        timeLimitLabel = new javax.swing.JLabel();
        timeLimitValueLabel = new javax.swing.JLabel();

        testsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Name", "Multiple Choice"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        testsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        testsTableScrollPane.setViewportView(testsTable);
        if (testsTable.getColumnModel().getColumnCount() > 0) {
            testsTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            testsTable.getColumnModel().getColumn(1).setPreferredWidth(75);
            testsTable.getColumnModel().getColumn(2).setPreferredWidth(5);
        }

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        tableLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        tableLabel.setText("Select a test to solve/view:");

        detailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Details"));

        startTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        startTimeLabel.setText("Start Time:");

        endTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        endTimeLabel.setText("End Time:");

        ownerLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ownerLabel.setText("Owner:");

        timeLimitLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        timeLimitLabel.setText("Time Limit:");

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timeLimitLabel)
                    .addComponent(endTimeLabel)
                    .addComponent(startTimeLabel)
                    .addComponent(ownerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endTimeValueLabel)
                    .addComponent(startTimeValueLabel)
                    .addComponent(ownerValueLabel)
                    .addComponent(timeLimitValueLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        detailsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {endTimeLabel, ownerLabel, startTimeLabel, timeLimitLabel});

        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ownerLabel)
                    .addComponent(ownerValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startTimeLabel)
                    .addComponent(startTimeValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTimeLabel)
                    .addComponent(endTimeValueLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeLimitLabel)
                    .addComponent(timeLimitValueLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(testsTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tableLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openButton))
                    .addComponent(detailsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {openButton, refreshButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(testsTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(refreshButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try {
            tests = client.getTests();
            populateTable();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error conncecting to server: " + ex.getMessage(), "Network Error", JOptionPane.ERROR_MESSAGE);
        } catch (ProtocolException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Protocol Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        try {
            Test test = client.getTest(getSelectedTestHeader().getId());
            Application.switchPanel(new TestPanel(client, test));
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error conncecting to server: " + ex.getMessage(), "Network Error", JOptionPane.ERROR_MESSAGE);
        } catch (ProtocolException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Protocol Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JLabel endTimeLabel;
    private javax.swing.JLabel endTimeValueLabel;
    private javax.swing.JButton openButton;
    private javax.swing.JLabel ownerLabel;
    private javax.swing.JLabel ownerValueLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JLabel startTimeValueLabel;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JTable testsTable;
    private javax.swing.JScrollPane testsTableScrollPane;
    private javax.swing.JLabel timeLimitLabel;
    private javax.swing.JLabel timeLimitValueLabel;
    // End of variables declaration//GEN-END:variables
}
